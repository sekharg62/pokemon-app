/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SpeciesImport } from './routes/_species'
import { Route as NameImport } from './routes/_name'
import { Route as Layout1Import } from './routes/_layout1'
import { Route as AbilitiesImport } from './routes/_abilities'
import { Route as SpeciesSpeciesRouteImport } from './routes/_species/species/route'
import { Route as NameNameRouteImport } from './routes/_name/name/route'
import { Route as Layout1UserRouteImport } from './routes/_layout1/user/route'
import { Route as AbilitiesAbilitiesRouteImport } from './routes/_abilities/abilities/route'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const SpeciesRoute = SpeciesImport.update({
  id: '/_species',
  getParentRoute: () => rootRoute,
} as any)

const NameRoute = NameImport.update({
  id: '/_name',
  getParentRoute: () => rootRoute,
} as any)

const Layout1Route = Layout1Import.update({
  id: '/_layout1',
  getParentRoute: () => rootRoute,
} as any)

const AbilitiesRoute = AbilitiesImport.update({
  id: '/_abilities',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const SpeciesSpeciesRouteRoute = SpeciesSpeciesRouteImport.update({
  path: '/species',
  getParentRoute: () => SpeciesRoute,
} as any)

const NameNameRouteRoute = NameNameRouteImport.update({
  path: '/name',
  getParentRoute: () => NameRoute,
} as any)

const Layout1UserRouteRoute = Layout1UserRouteImport.update({
  path: '/user',
  getParentRoute: () => Layout1Route,
} as any)

const AbilitiesAbilitiesRouteRoute = AbilitiesAbilitiesRouteImport.update({
  path: '/abilities',
  getParentRoute: () => AbilitiesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_abilities': {
      id: '/_abilities'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AbilitiesImport
      parentRoute: typeof rootRoute
    }
    '/_layout1': {
      id: '/_layout1'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof Layout1Import
      parentRoute: typeof rootRoute
    }
    '/_name': {
      id: '/_name'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof NameImport
      parentRoute: typeof rootRoute
    }
    '/_species': {
      id: '/_species'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SpeciesImport
      parentRoute: typeof rootRoute
    }
    '/_abilities/abilities': {
      id: '/_abilities/abilities'
      path: '/abilities'
      fullPath: '/abilities'
      preLoaderRoute: typeof AbilitiesAbilitiesRouteImport
      parentRoute: typeof AbilitiesImport
    }
    '/_layout1/user': {
      id: '/_layout1/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof Layout1UserRouteImport
      parentRoute: typeof Layout1Import
    }
    '/_name/name': {
      id: '/_name/name'
      path: '/name'
      fullPath: '/name'
      preLoaderRoute: typeof NameNameRouteImport
      parentRoute: typeof NameImport
    }
    '/_species/species': {
      id: '/_species/species'
      path: '/species'
      fullPath: '/species'
      preLoaderRoute: typeof SpeciesSpeciesRouteImport
      parentRoute: typeof SpeciesImport
    }
  }
}

// Create and export the route tree

interface AbilitiesRouteChildren {
  AbilitiesAbilitiesRouteRoute: typeof AbilitiesAbilitiesRouteRoute
}

const AbilitiesRouteChildren: AbilitiesRouteChildren = {
  AbilitiesAbilitiesRouteRoute: AbilitiesAbilitiesRouteRoute,
}

const AbilitiesRouteWithChildren = AbilitiesRoute._addFileChildren(
  AbilitiesRouteChildren,
)

interface Layout1RouteChildren {
  Layout1UserRouteRoute: typeof Layout1UserRouteRoute
}

const Layout1RouteChildren: Layout1RouteChildren = {
  Layout1UserRouteRoute: Layout1UserRouteRoute,
}

const Layout1RouteWithChildren =
  Layout1Route._addFileChildren(Layout1RouteChildren)

interface NameRouteChildren {
  NameNameRouteRoute: typeof NameNameRouteRoute
}

const NameRouteChildren: NameRouteChildren = {
  NameNameRouteRoute: NameNameRouteRoute,
}

const NameRouteWithChildren = NameRoute._addFileChildren(NameRouteChildren)

interface SpeciesRouteChildren {
  SpeciesSpeciesRouteRoute: typeof SpeciesSpeciesRouteRoute
}

const SpeciesRouteChildren: SpeciesRouteChildren = {
  SpeciesSpeciesRouteRoute: SpeciesSpeciesRouteRoute,
}

const SpeciesRouteWithChildren =
  SpeciesRoute._addFileChildren(SpeciesRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof SpeciesRouteWithChildren
  '/abilities': typeof AbilitiesAbilitiesRouteRoute
  '/user': typeof Layout1UserRouteRoute
  '/name': typeof NameNameRouteRoute
  '/species': typeof SpeciesSpeciesRouteRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof SpeciesRouteWithChildren
  '/abilities': typeof AbilitiesAbilitiesRouteRoute
  '/user': typeof Layout1UserRouteRoute
  '/name': typeof NameNameRouteRoute
  '/species': typeof SpeciesSpeciesRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_abilities': typeof AbilitiesRouteWithChildren
  '/_layout1': typeof Layout1RouteWithChildren
  '/_name': typeof NameRouteWithChildren
  '/_species': typeof SpeciesRouteWithChildren
  '/_abilities/abilities': typeof AbilitiesAbilitiesRouteRoute
  '/_layout1/user': typeof Layout1UserRouteRoute
  '/_name/name': typeof NameNameRouteRoute
  '/_species/species': typeof SpeciesSpeciesRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/abilities' | '/user' | '/name' | '/species'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/abilities' | '/user' | '/name' | '/species'
  id:
    | '__root__'
    | '/'
    | '/_abilities'
    | '/_layout1'
    | '/_name'
    | '/_species'
    | '/_abilities/abilities'
    | '/_layout1/user'
    | '/_name/name'
    | '/_species/species'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AbilitiesRoute: typeof AbilitiesRouteWithChildren
  Layout1Route: typeof Layout1RouteWithChildren
  NameRoute: typeof NameRouteWithChildren
  SpeciesRoute: typeof SpeciesRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AbilitiesRoute: AbilitiesRouteWithChildren,
  Layout1Route: Layout1RouteWithChildren,
  NameRoute: NameRouteWithChildren,
  SpeciesRoute: SpeciesRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_abilities",
        "/_layout1",
        "/_name",
        "/_species"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_abilities": {
      "filePath": "_abilities.tsx",
      "children": [
        "/_abilities/abilities"
      ]
    },
    "/_layout1": {
      "filePath": "_layout1.tsx",
      "children": [
        "/_layout1/user"
      ]
    },
    "/_name": {
      "filePath": "_name.tsx",
      "children": [
        "/_name/name"
      ]
    },
    "/_species": {
      "filePath": "_species.tsx",
      "children": [
        "/_species/species"
      ]
    },
    "/_abilities/abilities": {
      "filePath": "_abilities/abilities/route.tsx",
      "parent": "/_abilities"
    },
    "/_layout1/user": {
      "filePath": "_layout1/user/route.tsx",
      "parent": "/_layout1"
    },
    "/_name/name": {
      "filePath": "_name/name/route.tsx",
      "parent": "/_name"
    },
    "/_species/species": {
      "filePath": "_species/species/route.tsx",
      "parent": "/_species"
    }
  }
}
ROUTE_MANIFEST_END */
